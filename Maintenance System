#Libraries 
import pandas as pd
import numpy as np
import time
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score

#Variable Attribution
file_path = 'UMF4_Test_Bottom and Top.gcode'

with open(file_path, 'r') as file:
    lines = file.readlines()

specific_line = lines [7]
Nozzle_temperature = specific_line.strip(';EXTRUDER_TRAIN.0.INITIAL_TEMPERATURE:')
print('Nozzle temperature:', Nozzle_temperature,'ºC')

file_path = 'UMF4_Test_Bottom and Top.gcode'

with open(file_path, 'r') as file:
    lines = file.readlines()

specific_line = lines [12]
Plate_temperature = specific_line.strip(';BUILD_PLATE.INITIAL_TEMPERATURE:')
print('Plate temperature:',Plate_temperature,'ºC')

file_path = 'UMF4_Test_Bottom and Top.gcode'

with open(file_path, 'r') as file:
    lines = file.readlines()

specific_line = lines [13]
Volume_temperature = specific_line.strip(';BUILD_VOLUME.TEMPERATURE:')
print('Volume temperature:', Volume_temperature, 'ºC')

def read_gcode_parameters(file_path):
    with open(file_path, 'r') as file:
        lines = file.readlines()

    nozzle_temperature = lines[7].strip(';EXTRUDER_TRAIN.0.INITIAL_TEMPERATURE:').strip()
    plate_temperature = lines[12].strip(';BUILD_PLATE.INITIAL_TEMPERATURE:').strip()
    volume_temperature = lines[13].strip(';BUILD_VOLUME.TEMPERATURE:').strip()

    return float(nozzle_temperature), float(plate_temperature), float(volume_temperature)


file_path = 'UMF4_Test_Bottom and Top.gcode'
nozzle_temperature, plate_temperature, volume_temperature = read_gcode_parameters(file_path)
print('Nozzle temperature:', nozzle_temperature, 'ºC')
print('Plate temperature:', plate_temperature, 'ºC')
print('Volume temperature:', volume_temperature, 'ºC')

# Define acceptable ranges
acceptable_ranges = {
    'temperature_extruder': (200, 240), 
    'temperature_bed': (50, 70),  
    'volume_temperature': (30, 40)  
}

def get_temperature_extruder():
    return np.random.normal(220, 5) 

def get_temperature_bed():
    return np.random.normal(60, 2)  

def get_volume_temperature():
    return np.random.normal(35, 2) 


def check_values(data_row):
    alerts = []
    for param, (min_val, max_val) in acceptable_ranges.items():
        if not (min_val <= data_row[param] <= max_val):
            alerts.append(f"Alert: {param} out of range. Current value: {data_row[param]}")
    return alerts

columns = ['timestamp', 'temperature_extruder', 'temperature_bed', 'volume_temperature']
data = pd.DataFrame(columns=columns)

try:
    for _ in range(100):
        data_row = {
            'timestamp': time.time(),
            'temperature_extruder': get_temperature_extruder(),
            'temperature_bed': get_temperature_bed(),
            'volume_temperature': get_volume_temperature()
        }
        data_row_df = pd.DataFrame([data_row])
        if not data_row_df.isnull().all(axis=None):
            data = pd.concat([data, data_row_df], ignore_index=True)
        alerts = check_values(data_row)
        if alerts:
            for alert in alerts:
                print(alert)
            print("Stopping the 3D printer due to the above issues.")
            break
        print(data_row)
        time.sleep(0.5)  
except KeyboardInterrupt:
    print("Data collection stopped manually.")


data.to_csv('3d_printer_data_simulated.csv', index=False)
print("Data collection completed and saved to '3d_printer_data_simulated.csv'")


df = pd.read_csv('3d_printer_data_simulated.csv')


df.fillna(df.mean(), inplace=True)


from sklearn.preprocessing import MinMaxScaler

features = df.drop(['timestamp'], axis=1) 
scaler = MinMaxScaler()
features_scaled = scaler.fit_transform(features)

X = features_scaled  
y = np.random.choice([0, 1], size=len(df)) 

pd.DataFrame(features_scaled, columns=features.columns).head()

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a Random Forest classifier
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Evaluate the model
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

# Plot feature importance
feature_importance = model.feature_importances_
features_names = features.columns

# Create a DataFrame for visualization
feature_importance_df = pd.DataFrame({
    'Feature': features_names,
    'Importance': feature_importance
}).sort_values(by='Importance', ascending=False)

# Plot
plt.figure(figsize=(10, 6))
sns.barplot(data=feature_importance_df, x='Importance', y='Feature')
plt.title('Feature Importance for Predicting Maintenance Needs')
plt.show()

df = pd.read_csv('3d_printer_data_simulated.csv')


df.head()

plt.figure(figsize=(12, 8))
for column in columns[1:]:  # Exclude 'timestamp'
    plt.plot(df['timestamp'], df[column], label=column)
plt.xlabel('Timestamp')
plt.ylabel('Values')
plt.title('3D Printer Parameter Monitoring')
plt.legend()
plt.show()

#GCode
file_path = 'UMF4_Test_Bottom and Top.gcode'

with open(file_path, 'r') as file:
    lines = file.readlines()

bottom_layer = lines [0:775]
print (bottom_layer)





